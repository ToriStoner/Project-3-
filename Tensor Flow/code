import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam

# Step 1: Load Pre-Trained ResNet50 Model without the top layers
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Step 2: Freeze the base layers to prevent retraining
base_model.trainable = False

# Step 3: Build the custom model
model = models.Sequential()

# Add the pre-trained ResNet50 as the base model
model.add(base_model)

# Add a Global Average Pooling layer to reduce the feature map's dimensionality
model.add(layers.GlobalAveragePooling2D())

# Add a fully connected layer with 512 neurons
model.add(layers.Dense(512, activation='relu'))

# Add the output layer with 26 neurons (one for each letter in the alphabet)
# Use softmax activation to get the probability distribution over 26 classes
model.add(layers.Dense(26, activation='softmax'))

# Step 4: Compile the model
model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

# Step 5: Set up ImageDataGenerator for data augmentation and normalization
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

test_datagen = ImageDataGenerator(rescale=1./255)

# Assuming you have a directory with images organized into subdirectories for each letter:
# Example structure: 
#   /path/to/data/train/A/...
#   /path/to/data/train/B/...
#   /path/to/data/test/A/...
#   /path/to/data/test/B/...

train_generator = train_datagen.flow_from_directory(
    'path/to/data/train',
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

test_generator = test_datagen.flow_from_directory(
    'path/to/data/test',
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

# Step 6: Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    epochs=10,
    validation_data=test_generator,
    validation_steps=test_generator.samples // test_generator.batch_size
)

# Step 7: Save the trained model
model.save('asl_resnet50_model.h5')

